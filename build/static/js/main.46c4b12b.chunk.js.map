{"version":3,"sources":["InfoBox.js","utils.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46c4b12b.chunk.js","sourcesContent":["import React from 'react'\r\nimport './InfoBox.css';\r\nimport  {\r\n    CardContent,\r\n    Card,\r\n    Typography\r\n  } from \"@material-ui/core\";\r\n\r\n\r\nfunction InfoBox({title,cases,total,active,isRed, ...props}) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSeconadry\">{title}</Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"} `}>{cases}</h2>\r\n                <Typography className=\"infoBox__total\" color=\"textSeconadry\">{total} Total</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import {Circle, Popup} from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\nimport React from 'react';\r\nconst casesTypeColors ={\r\n    cases :{\r\n        hex : \"#CC1034\",\r\n        multiplier : 800,\r\n    },\r\n    recovered :{\r\n        hex : \"#7dd71d\",\r\n        multiplier : 1200,\r\n    },\r\n    deaths :{\r\n        hex : \"#fb4443\",\r\n        multiplier : 2000,\r\n    },\r\n}\r\n\r\nexport const sortData = (data)=>\r\n{\r\n    const sortedData = [...data];\r\n    sortedData.sort((a,b)=>{\r\n        if(a.cases>b.cases){\r\n        return -1;}\r\n        else{\r\n        return 1;}\r\n    })\r\n    return sortedData;\r\n}\r\nexport const prettyPrintStat = (stat)=> stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType=\"cases\")=>\r\n    data.map(country =>(\r\n        <Circle\r\n            center={[country.countryInfo.lat,country.countryInfo.long]}\r\n            fillOpacity ={0.4}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor = {casesTypeColors[casesType].hex}\r\n            radius = {Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier}>\r\n        \r\n        <Popup>\r\n            <div className=\"info-container\">\r\n                <div className=\"info-flag\" style={{backgroundImage:`url(${country.countryInfo.flag})`}}></div>\r\n                <div className=\"info-name\">{country.country}</div>\r\n                <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                <div className=\"info-deaths\">Dealths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n            </div>\r\n        </Popup>\r\n        </Circle>\r\n    ));","import React from 'react'\r\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\";\r\nimport \"./Map.css\"\r\nimport {showDataOnMap} from './utils'\r\nfunction Map({countries, casesType, center,zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">Openstreet</a> contributors'\r\n                />\r\n            {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css'\r\nimport numeral from \"numeral\"\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases})=>(\r\n            <tr>\r\n                <td>{country}</td>\r\n                <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n            </tr>    \r\n            ))}\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default Table\r\n","import React , {useState, useEffect} from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options ={\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\"\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\nconst buildChartData = (data, casesType='cases') =>{\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n   for(let date in data.cases){\r\n        if(lastDataPoint)\r\n        {\r\n            const newDataPoint = {\r\n                x:date,\r\n                y:data[casesType][date] - lastDataPoint\r\n            }\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({casesType,...props}) {  \r\n    const [data,setData] = useState({});\r\n    \r\n    useEffect(() => {\r\n        const fetchData = async()=>{\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                let chartData = buildChartData(data,casesType);\r\n                setData(chartData);\r\n            });\r\n        };\r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    \r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length>0 && (\r\n                <Line  \r\n                options={options}\r\n                    data = {{\r\n                        datasets : [{\r\n                            backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                            borderColor: \"#CC1034\",\r\n                            data:data,\r\n                        }]\r\n                    }}\r\n                />\r\n            )}\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport {MenuItem,Select,FormControl,CardContent,Card,} from \"@material-ui/core\";\nimport InfoBox from './InfoBox'\nimport Map from './Map'\nimport Table from './Table'\nimport {sortData, prettyPrintStat} from './utils'\nimport LineGraph from \"./LineGraph\"\nimport \"leaflet/dist/leaflet.css\"\n// STATE = HOW TO WRITE A VARIABLE IN REACT\n// USEEFFECT = Runs a piece of code based on condition (Run)\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"Worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(()=> {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response)=> response.json())\n    .then((data)=>{\n      setCountryInfo(data);\n    });\n  });\n  useEffect (()=>{\n    const getCountriesData = async() => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response)=> response.json())\n      .then((data) => {\n        const countries = data.map((country)=> ({\n          name : country.country,\n          value : country.countryInfo.iso2,\n        }));\n        const sortedData = sortData(data);\n        setCountries(countries);\n        setMapCountries(data);\n        setTableData(sortedData);\n      });\n    };\n  // Runs when the component loads and not agian after\n  // ALso Runs when comppnent content changes\n  getCountriesData();\n  },[]);\n  \n  const onCountryChange = async(event)=>{\n    const countryCode = event.target.value;\n    const url = countryCode === \"Worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n    await fetch(url)\n    . then((response)=>response.json())\n    .then((data)=>{\n    setCountry(countryCode);\n    setMapCenter([data.countryInfo.lat,data.countryInfo.long]);\n    setMapZoom(4);\n    setCountryInfo(data);\n    });\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n      <div className=\"app__header\">\n      <h1>COVID-19 TRACKER</h1>\n      <FormControl className=\"app\">\n        <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n        <MenuItem value=\"Worldwide\">WorldWide</MenuItem>\n        {countries.map(country=>(\n          <MenuItem value={country.value}>{country.name}</MenuItem>\n        ))}\n        \n        </Select>\n      </FormControl>\n      </div>\n\n      <div className=\"app__stats\">\n          <InfoBox isRed active={casesType===\"cases\"} onClick={(e)=> setCasesType('cases')} title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n          <InfoBox active={casesType===\"recovered\"} onClick={(e)=> setCasesType('recovered')} title=\"Coronavirus Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n          <InfoBox isRed active={casesType===\"deaths\"} onClick={(e)=> setCasesType('deaths')} title=\"Coronavirus Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)}/>\n      </div>\n          \n      {/* Map */}\n      <Map\n      casesType = {casesType}\n      countries = {mapCountries}\n      center = {mapCenter}\n      zoom = {mapZoom}\n      />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3> Live Cases by Country </h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\"> Worldwide new {casesType} </h3>\n          <LineGraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}